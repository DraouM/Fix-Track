// src/app/layout.tsx
'use client'; // Ensures the layout and its children can use client-side features like Context

import type { Metadata } from 'next'; // Import type for Metadata
import { Inter as FontSans } from 'next/font/google';
import './globals.css';
import { cn } from '@/lib/utils';
import { ClientProviders } from '@/components/ClientProviders';
import AppLayout from '@/components/AppLayout';

const fontSans = FontSans({
  subsets: ['latin'],
  variable: '--font-sans',
});

// Metadata should be defined in a server component or a separate metadata.ts file
// if the RootLayout itself needs to be a client component.
// For this application structure, where providers are initialized high up,
// keeping RootLayout as 'use client' is common. We will manage metadata exports
// from specific page files or a root metadata object if not using a client layout.

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          'min-h-screen bg-background font-sans antialiased',
          fontSans.variable
        )}
      >
        <ClientProviders>
          <AppLayout>{children}</AppLayout>
        </ClientProviders>
      </body>
    </html>
  );
}

// Example of how metadata would be handled if layout.tsx were a Server Component
// or if metadata is managed globally from a Server Component parent.
// Since layout.tsx is 'use client', this direct export is problematic.
// export const metadata: Metadata = {
//   title: 'FixTrack App',
//   description: 'Generated by FixTrack',
// };
